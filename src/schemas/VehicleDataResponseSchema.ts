import { z } from 'zod';

const VehicleDataResponseSchema = z.object({
  response: z.object({
    id: z.number(),
    user_id: z.number(),
    vehicle_id: z.number(),
    vin: z.string(),
    display_name: z.string(),
    option_codes: z.string().nullable(),
    color: z.unknown(),
    access_type: z.string(),
    tokens: z.array(z.string()),
    state: z.string().nullable(),
    in_service: z.boolean(),
    id_s: z.string(),
    calendar_enabled: z.boolean(),
    api_version: z.number(),
    backseat_token: z.unknown(),
    backseat_token_updated_at: z.unknown(),
    drive_state: z.object({
      gps_as_of: z.number(),
      heading: z.number(),
      latitude: z.number(),
      longitude: z.number(),
      native_latitude: z.number(),
      native_location_supported: z.number(),
      native_longitude: z.number(),
      native_type: z.string(),
      power: z.number(),
      shift_state: z.unknown(),
      speed: z.unknown(),
      timestamp: z.number(),
    }),
    climate_state: z.object({
      battery_heater: z.boolean(),
      battery_heater_no_power: z.boolean(),
      climate_keeper_mode: z.string(),
      defrost_mode: z.number(),
      driver_temp_setting: z.number(),
      fan_status: z.number(),
      inside_temp: z.number(),
      is_auto_conditioning_on: z.boolean(),
      is_climate_on: z.boolean(),
      is_front_defroster_on: z.boolean(),
      is_preconditioning: z.boolean(),
      is_rear_defroster_on: z.boolean(),
      left_temp_direction: z.number(),
      max_avail_temp: z.number(),
      min_avail_temp: z.number(),
      outside_temp: z.number(),
      passenger_temp_setting: z.number(),
      remote_heater_control_enabled: z.boolean(),
      right_temp_direction: z.number(),
      seat_heater_left: z.number(),
      seat_heater_right: z.number(),
      side_mirror_heaters: z.boolean(),
      timestamp: z.number(),
      wiper_blade_heater: z.boolean(),
    }),
    charge_state: z.object({
      battery_heater_on: z.boolean(),
      battery_level: z.number(),
      battery_range: z.number(),
      charge_current_request: z.number(),
      charge_current_request_max: z.number(),
      charge_enable_request: z.boolean(),
      charge_energy_added: z.number(),
      charge_limit_soc: z.number(),
      charge_limit_soc_max: z.number(),
      charge_limit_soc_min: z.number(),
      charge_limit_soc_std: z.number(),
      charge_miles_added_ideal: z.number(),
      charge_miles_added_rated: z.number(),
      charge_port_cold_weather_mode: z.unknown(),
      charge_port_door_open: z.boolean(),
      charge_port_latch: z.string(),
      charge_rate: z.number(),
      charge_to_max_range: z.boolean(),
      charger_actual_current: z.number(),
      charger_phases: z.number(),
      charger_pilot_current: z.number(),
      charger_power: z.number(),
      charger_voltage: z.number(),
      charging_state: z.string(),
      conn_charge_cable: z.string(),
      est_battery_range: z.number(),
      fast_charger_brand: z.string(),
      fast_charger_present: z.boolean(),
      fast_charger_type: z.string(),
      ideal_battery_range: z.number(),
      managed_charging_active: z.boolean(),
      managed_charging_start_time: z.unknown(),
      managed_charging_user_canceled: z.boolean(),
      max_range_charge_counter: z.number(),
      minutes_to_full_charge: z.number(),
      not_enough_power_to_heat: z.boolean(),
      scheduled_charging_pending: z.boolean(),
      scheduled_charging_start_time: z.unknown(),
      time_to_full_charge: z.number(),
      timestamp: z.number(),
      trip_charging: z.boolean(),
      usable_battery_level: z.number(),
      user_charge_enable_request: z.unknown(),
    }),
    gui_settings: z.object({
      gui_24_hour_time: z.boolean(),
      gui_charge_rate_units: z.string(),
      gui_distance_units: z.string(),
      gui_range_display: z.string(),
      gui_temperature_units: z.string(),
      show_range_units: z.boolean(),
      timestamp: z.number(),
    }),
    vehicle_state: z.object({
      api_version: z.number(),
      autopark_state_v2: z.string(),
      autopark_style: z.string(),
      calendar_supported: z.boolean(),
      car_version: z.string(),
      center_display_state: z.number(),
      df: z.number(),
      dr: z.number(),
      fd_window: z.number(),
      fp_window: z.number(),
      ft: z.number(),
      homelink_device_count: z.number(),
      homelink_nearby: z.boolean(),
      is_user_present: z.boolean(),
      last_autopark_error: z.string(),
      locked: z.boolean(),
      media_state: z.object({ remote_control_enabled: z.boolean() }),
      notifications_supported: z.boolean(),
      odometer: z.number(),
      parsed_calendar_supported: z.boolean(),
      pf: z.number(),
      pr: z.number(),
      rd_window: z.number(),
      remote_start: z.boolean(),
      remote_start_enabled: z.boolean(),
      remote_start_supported: z.boolean(),
      rp_window: z.number(),
      rt: z.number(),
      sentry_mode: z.boolean(),
      sentry_mode_available: z.boolean(),
      smart_summon_available: z.boolean(),
      software_update: z.object({
        download_perc: z.number(),
        expected_duration_sec: z.number(),
        install_perc: z.number(),
        status: z.string(),
        version: z.string(),
      }),
      speed_limit_mode: z.object({
        active: z.boolean(),
        current_limit_mph: z.number(),
        max_limit_mph: z.number(),
        min_limit_mph: z.number(),
        pin_code_set: z.boolean(),
      }),
      summon_standby_mode_enabled: z.boolean(),
      sun_roof_percent_open: z.number(),
      sun_roof_state: z.string(),
      timestamp: z.number(),
      valet_mode: z.boolean(),
      valet_pin_needed: z.boolean(),
      vehicle_name: z.unknown(),
    }),
    vehicle_config: z.object({
      can_accept_navigation_requests: z.boolean(),
      can_actuate_trunks: z.boolean(),
      car_special_type: z.string(),
      car_type: z.string(),
      charge_port_type: z.string(),
      default_charge_to_max: z.boolean(),
      ece_restrictions: z.boolean(),
      eu_vehicle: z.boolean(),
      exterior_color: z.string(),
      has_air_suspension: z.boolean(),
      has_ludicrous_mode: z.boolean(),
      motorized_charge_port: z.boolean(),
      plg: z.boolean(),
      rear_seat_heaters: z.number(),
      rear_seat_type: z.number(),
      rhd: z.boolean(),
      roof_color: z.string(),
      seat_type: z.number(),
      spoiler_type: z.string(),
      sun_roof_installed: z.number(),
      third_row_seats: z.string(),
      timestamp: z.number(),
      trim_badging: z.string(),
      use_range_badging: z.boolean(),
      wheel_type: z.string(),
    }),
  }),
});

export default VehicleDataResponseSchema;
